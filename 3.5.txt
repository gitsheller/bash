Shell Expansions

7

brace expansion
tilde expansion

parameter and variable expansion 
command substitution
arithmetic expansion
Process Substitution

 word splitting 
 filename expansion(glob)
 
 
 
 quote removal
 
 Brace Expansion
 Brace expansions may be nested.
 [preamble]{xxx}[postscript]
 {comma-separated strings}
 { seqeunce expression}
 x..y[..incr]   0
 
 Tilde Expansion
 tilde-prefix     a word begins with an unquoted tilde character (‘~’)/
 ~
 ~loginname
 ~+
 ~-
 ~N ~+N
 ~-N

Shell Parameter Expansion
${parameter}
$parameter

variable indirection
indirect expansion
var1=abc
var2=var1
${!var2}

exceptions
${!prefix}
${!name[@]}
The exclamation point must immediately follow the left brace in order to introduce indirection. 

existence
null

if the colon is omitted, the operator tests only for existence. 
if the colon is included, the operator tests for both parameter’s existence and that its value is not null.
:  not null or null
word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion. 

${parameter:-word}

${parameter:=word}  Positional parameters and special parameters may not be assigned to in this way.

${parameter:?word}  ${parameter:?}

${parameter:+word}

Substring Expansion
${parameter:offset}
${parameter:offset:length}        ${var: -5:-3} "${array[*]}" "${array[@]}"

${!prefix*}
${!prefix@}

${!name[@]}
${!name[*]}

${#parameter}

${parameter#word}
${parameter##word}
${parameter%word}
${parameter%%word}

${parameter/pattern/string}   /  #  %

${parameter^pattern}
${parameter^^pattern}
${parameter,pattern}
${parameter,,pattern}    ?

Command Substitution
$(command)
`command`  \
$(cat file)  $(< file)
To nest when using the backquoted form, escape the inner backquotes with backslashes.
If the substitution appears within double quotes, word splitting and filename expansion are not performed on the results.

Arithmetic Expansion
$(( expression ))
The expression is treated as if it were within double quotes,
but a double quote inside the parentheses is not treated specially.
All tokens in the expression undergo parameter expansion, command substitution, and quote removal. 
Arithmetic expansions may be nested.

Process Substitution
Process substitution is supported on systems that support named pipes (FIFOs)
or the /dev/fd method of naming open files.
<(list)
>(list)
When available, process substitution is performed simultaneously with parameter and variable expansion,
command substitution, and arithmetic expansion.

 Word Splitting
 "" prevent from Word Splitting
 parameter expansion, command substitution, and arithmetic expansion
 IFS   field
 If the value of IFS is null, no word splitting occurs. 
  if no expansion occurs, no splitting is performed. 

Filename Expansion  file name generation  globbing
set -f
nullglob
nocaseglob
failglob
dotglob
When a pattern is used for filename expansion, the character ‘.’ at the start of a filename or
immediately following a slash must be matched explicitly, unless the shell option dotglob is set.
When matching a file name, the slash character must always be matched explicitly.
GLOBIGNORE
The filenames . and .. are always ignored when GLOBIGNORE is set and not null. 
setting GLOBIGNORE to a non-null value has the effect of enabling the dotglob shell option,
so all other filenames beginning with a ‘.’ will match.
.*
The dotglob option is disabled when GLOBIGNORE is unset. 

Pattern Matching
The NUL character may not occur in a pattern.
A backslash escapes the following character; the escaping backslash is discarded when matching.

*        Matches any string, including the null string.
globstar
**       match all files and zero or more directories and subdirectories. 
**/      match only directories and subdirectories.
?        Matches any single character. 
[set]
[!set]   [^set]
set    x-y  -abc abc-  []abc]          dictionary order

character classes 
alnum   alpha   ascii   blank   cntrl   digit   graph   lower
print   punct   space   upper   word    xdigit
[=c=]
[.symbol.]

extglob
extended pattern matching operators

a pattern-list is a list of one or more patterns separated by a ‘|’.
 Composite patterns may be formed using one or more of the following sub-patterns: 
 
 ?(pattern-list)  0  1
 *(pattern-list) >=0
 +(pattern-list) >=1
 @(pattern-list)   Matches one of the given patterns.
 !(pattern-list)
 
 Quote Removal
 After the preceding expansions,
 all unquoted occurrences of the characters ‘\’, ‘'’, and ‘"’ 
 that did not result from one of the above expansions are removed. 
 \
 '
 "
